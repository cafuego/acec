<?php
/**
 * @file
 */

/**
 * Implements hook_menu().
 */
function acec_menu() {
  $items['acec'] = array(
    'title' => 'ACEC',
    'title callback' => 'acec_signup_title',
    'page callback' => 'acec_signup_page',
    'access callback' => TRUE,
    'menu_name' => 'secondary-menu',
    'type' => MENU_SUGGESTED_ITEM,
  );
  return $items;
}

/**
 * Implements hook_menu_alter().
 */
function acec_menu_alter(&$items) {
  $items['user/login']['title'] = t('Sign in');
  $items['user/register']['title'] = t('Sign up');
}

/**
 * Implements hook_email_registration_name().
 *
 * Generate usernames that are identical to the email address.
 */
function acec_email_registration_name($edit, $account) {
  return (empty($account->mail)) ? $edit->mail : $account->mail;
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function acec_form_node_form_alter(&$form, &$form_state, $form_id) {
  // Only show the revisions info if the user has permission
  // to mess with node revisions to begin with. For any node type.
  $form['revision_information']['#access'] = user_access('view content revisions');

  // Inject an extra header in the new session form if the user form shows.
  if ($form_id == 'session_node_form') {
    $form['proposal_header'] = array(
      '#markup' => t('<span class="fieldset-legend">Enter details for your session</span>'),
      '#weigt' => $form['title']['weight'] - 1,
    );
  }
}

/*
 * Chuck the current user into the list of presenters.
 */
function acec_node_presave($node) {
  if ($node->type != 'session')
    return;

  $langcode = $node->language;

  if (empty($node->field_speakers)) {
    $node->field_speakers[$langcode][0] = array('target_id' => $node->uid);
  }
  else {
    $uids = array();
    foreach ($node->field_speakers[$langcode] as $speaker) {
      $uids[] = $speaker['target_id'];
    }
    if (!in_array($node->uid, $uids)) {
      $node->field_speakers[$langcode][] = array('target_id' => $node->uid);
    }
  }
}

/**
 * Implements hook_flag().
 *
 * Apply some logic when a user selects a session.
 */
function acec_flag($action, $flag, $content_id, $account) {

  if ($action == 'flag' && $flag->name == 'session_schedule') {
    $session = node_load($content_id);

    // @TODO
    // Check if there are already as many delegates in here as the room will take.

    // @TODO
    // Check for overlapping timeslots too.

    // Find all sessions that share a timeslot with this session
    // and have been flagged by the current user.
    $query = new EntityFieldQuery();
    $query->entityCondition('entity_type', 'node')
          ->entityCondition('bundle', 'session')
          ->entityCondition('entity_id', $content_id, '<>')
          ->fieldCondition('field_timeslot', 'nid', $session->field_timeslot[$session->language][0]['nid'], '=');
    // Tag the query, so we can join the flags.
    $query->addTag('session_schedule_flag');

    // Add the flag to the query.
    $query->addMetaData('flag', $flag);

    // And add the user.
    $query->addMetaData('account', $account);

    $clashes = $query->execute();

    // Unflag all the clashing nodes and let the user know.
    if (!empty($clashes['node'])) {
      foreach ($clashes['node'] as $nid => $info) {
        // Unflag the node. Need to do this manually or we get a hook callback loop.
        db_delete('flag_content')
          ->condition('content_id', $nid)
          ->condition('fid', $flag->fid)
          ->condition('uid', $account->uid)
          ->execute();

        // Tell the user what we did.
        $node = node_load($nid);
        drupal_set_message(t('Removed %title from your schedule due to a time clash', array('%title' => $node->title)), 'warning');
        unset($node);
      }
    }
  }
}

/**
 * Implements hook_query_TAG_alter().
 */
function acec_query_session_schedule_flag_alter(QueryAlterableInterface $query) {

  $tables =& $query->getTables();

  foreach ($tables as &$table) {
    // Grab the first alias.
    if (empty($alias)) {
      $alias = $table['alias'];
    }
  }

  // Grab the metadata we need to join flags.
  $flag = $query->getMetadata('flag');
  $account = $query->getMetadata('account');

  // Join flags by the current user.
  $query->innerJoin('flag_content', 'f', 'f.fid = ' . $flag->fid . ' AND f.content_id = ' . $alias . '.entity_id AND f.uid = ' . $account->uid);
}

/**
 * Mess with the flag link if own session.
 */

/**
 * Implements hook_ctools_plugin_directory().
 */
function acec_ctools_plugin_directory($owner, $plugin_type) {
  if ($owner == 'ctools' && $plugin_type == 'access') {
    return 'plugins/access';
  }

  if ($owner == 'ctools' && $plugin_type == 'contexts') {
    return 'plugins/contexts';
  }

  if ($owner == 'ctools' && $plugin_type == 'relationships') {
    return 'plugins/relationships';
  }
}

/**
 * Helper that returns a menu item title.
 */
function acec_signup_title($whatever) {
  if (user_is_anonymous()) {
    if (arg(0) == 'user') {
      return t('Sign in');
    }
    return t('Sign up');
  }
  return t('My account');
}

/**
 * Helper that redirects a user.
 */
function acec_signup_page() {
  if (user_is_anonymous()) {
    if (arg(1) == 'register') {
      $page = 'user';
    }
    else {
      $page = 'user/register';
    }
  }
  else {
    $page = 'user';
  }
  drupal_goto($page);
}

/**
 * Implements hook_block_info().
 */
function acec_block_info() {
  return array(
    'searchapi' => array(
      'info' => t('SearchAPI Search'),
    ),
  );
}

/**
 * Implements hook_block_view().
 */
function acec_block_view() {
  return array(
    'subject' => t('SearchAPI Search'),
    'content' => drupal_get_form('acec_searchapi_form'),
  );
}


/**
 * Helper to return a search form for SearchAPI.
 */
function acec_searchapi_form() {
  $form['#action'] = 'search';
  $form['#method'] = 'GET';
  $form['#attributes'] = array('id' => array('search-block-form'), 'class' => array('search-form'));

  $form['basic'] = array(
    '#type' => 'container',
    '#attributes' => array('class' => array('container-inline')),
  );

  $form['basic']['search_api_views_fulltext'] = array(
    '#type' => 'searchfield',
    '#size' => 15,
    '#maxlength' => 128,
    '#attributes' => array('title' => t('Enter the terms you wish to search for.')),
  );

  $form['basic']['submit'] = array(
    '#type' => 'submit',
    '#value' =>  t('Search'),
  );

  return $form;
}

/**
 * Implements hook_field_formatter_info().
 */
function acec_field_formatter_info() {
  return array(
    'acec_twitter_link' => array(
      'label' => t('Twitter, @handle as link'),
      'field types' => array('text'),
    ),
  );
}

/**
 * Implements hook_field_formatter_view().
 */
function acec_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();
  $settings = $display['settings'];

  switch ($display['type']) {
    case 'acec_twitter_link':
      // Common case: each value is displayed individually in a sub-element
      // keyed by delta. The field.tpl.php template specifies the markup
      // wrapping each value.
      foreach ($items as $delta => $item) {
        $element[$delta] = array(
          '#theme' => 'acec_twitter_handle',
          '#item' => $item,
        );
      }
      break;
  }

  return $element;
}

/**
 * Implements hook_theme().
 */
function acec_theme($existing, $type, $theme, $path) {
  return array(
    'acec_twitter_handle' => array(
      'variables' => array(
        'item' => NULL,
      ),
    ),
  );
}

/**
 * Theme function; Twitter handle link.
 */
function theme_acec_twitter_handle($variables) {
  $item = $variables['item'];

  // Early return.
  if (empty($item['value'])) {
    return;
  }

  // If a link, just return the link.
  if (strpos($item['value'], 'http') === 0) {
    $parts = parse_url($item['value']);
    $twitter = basename($parts['path']);
    $link = $parts['$path'];
  }
  else {
    // Remove the @ if present.
    $twitter = strtr($item['value'], array('@' => ''));
    $link = t('http://twitter.com/@twitter', array('@twitter' => $twitter));
  }

  // Return a pretty link and an @handle.
  return l(t('@@twitter', array('@twitter' => $twitter)), $link, array('attributes' => array('rel' => 'nofollow')));
}
